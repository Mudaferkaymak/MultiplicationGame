/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import java.util.List;
import java.util.Random;
import javax.swing.JTextField;
import javax.swing.Timer;
/**
 *
 * @author MÜDAFERKAYMAK
 */
public class gameScreen extends javax.swing.JFrame {
    
    /**
     * Creates new form gameScreen
     */
    int[][] questions;
    fileManager fileManager = new fileManager("settings.ser");
    List<settings> settingsArr = fileManager.readSetting();
    int[] times ;
    Timer t;
    static int countQuestion;
    private static int selected;
    private int k =0;
    private String userName;
    private int initAnswer;
    private int correctCount=0;
    private float correctScore;
    private float speedScore;
    private int selectedArr;
    //   Record record = new Record();
    private String initResult;
    String gameDetails = "gameDetails.csv";
    String fullGames = "fullGames.csv";
    private static String initUserName;
    float totalScore;
    String currentDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"));
    Random rand = new Random();
    int gameIDGenerated =  rand.nextInt(100000);
    
    public gameScreen(int selectedRow,int time,int questionCounter,int answer,String userName,float maxScore) {
        selectedArr = selectedRow;
        initUserName = userName;
        initComponents();
        //zaman kodları her saniyede counterı artıyor
        k = time;
        t = new Timer(1000, new ActionListener() {     
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.setText(String.valueOf(k));
                k++;
            }
        });
        t.start();

      
        result.requestFocus();
        selected=selectedRow;
        generateQuestions();
        //soru sayısını ekrana yazdırıyor
        countQuestion = questionCounter;
        question.setText("soru " + countQuestion);

        times = new int[settingsArr.get(selected).getNumberOfQuestion()+1];
    }
   
            
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        a = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        b = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        result = new javax.swing.JTextField();
        question = new javax.swing.JTextField();
        timer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(Toolkit.getDefaultToolkit().getScreenSize().width/3,Toolkit.getDefaultToolkit().getScreenSize().height/5);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 102, 255));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        a.setEditable(false);
        a.setBackground(new java.awt.Color(153, 102, 255));
        a.setFont(new java.awt.Font("Mario Kart DS", 1, 60)); // NOI18N
        a.setForeground(new java.awt.Color(102, 0, 102));
        a.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        a.setBorder(null);
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(153, 102, 255));
        jTextField2.setFont(new java.awt.Font("Arial", 1, 42)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(102, 0, 102));
        jTextField2.setText("X");
        jTextField2.setBorder(null);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        b.setEditable(false);
        b.setBackground(new java.awt.Color(153, 102, 255));
        b.setFont(new java.awt.Font("Mario Kart DS", 1, 60)); // NOI18N
        b.setForeground(new java.awt.Color(102, 0, 102));
        b.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        b.setToolTipText("");
        b.setBorder(null);
        b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(153, 102, 255));
        jTextField4.setFont(new java.awt.Font("Arial", 1, 42)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(102, 0, 102));
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setText("=");
        jTextField4.setBorder(null);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        result.setBackground(new java.awt.Color(153, 102, 255));
        result.setFont(new java.awt.Font("Mario Kart DS", 1, 60)); // NOI18N
        result.setForeground(new java.awt.Color(102, 0, 102));
        result.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        result.setToolTipText("");
        result.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        result.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultMouseClicked(evt);
            }
        });
        result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultActionPerformed(evt);
            }
        });
        result.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resultKeyPressed(evt);
            }
        });

        question.setEditable(false);
        question.setBackground(new java.awt.Color(153, 102, 255));
        question.setFont(new java.awt.Font("Mario Kart DS", 1, 40)); // NOI18N
        question.setForeground(new java.awt.Color(102, 0, 102));
        question.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        question.setText("soru 1");
        question.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        question.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionActionPerformed(evt);
            }
        });

        timer.setFont(new java.awt.Font("Mario Kart DS", 1, 44)); // NOI18N
        timer.setForeground(new java.awt.Color(102, 0, 102));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(timer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(a, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(result, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
;
        
    }//GEN-LAST:event_formKeyPressed

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed

    }//GEN-LAST:event_jPanel1KeyPressed

    private void questionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_questionActionPerformed

    private void resultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
          //  gameScreen frame = new gameScreen(selected,k,countQuestion,initAnswer,userName);
          //entera basıldığında sorunun cevabını input eder her entera basıldğında counter artar eğer counter soru sayısını ulaşmıssa oyun biyer
           if(settingsArr.get(selected).getNumberOfQuestion()>=countQuestion){
                randomGenerator();
                JTextField textField = (JTextField) evt.getSource();
                textField.setText(""); 
           }else{
                         setVisible(false);
                        endGame frame2 = new endGame(correctScore,speedScore,totalScore,initUserName,selectedArr);
                        frame2.setVisible(true);
           }
        }
    }//GEN-LAST:event_resultKeyPressed

    private void resultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultActionPerformed
        // TODO add your handling code here:

               
    }//GEN-LAST:event_resultActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aActionPerformed

    private void resultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultMouseClicked

               
    }//GEN-LAST:event_resultMouseClicked

    private void bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActionPerformed

    }//GEN-LAST:event_bActionPerformed

    /**
     * @param args the command line arguments
     */

    public JTextField getQuestionCount() {
        return question;
    }
    public JTextField getResult(){
        return result;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }
public void randomGenerator(){  
            
        
   
   
         //soruda gerçirilen zaman için
         if(countQuestion>0){
             times[countQuestion] = k;
             System.out.println(k);
         }
         if(countQuestion<settingsArr.get(selected).getNumberOfQuestion()){
             
         
            question.setText("soru " + (countQuestion+1));
                fileManager fileManager = new fileManager("settings.ser");
                List<settings> settingsArr = fileManager.readSetting();
                
                //güncel soru için questions dizisinden veriler alınır ve Stringe çevirilir
                //dönüştürülen String değerleri ekrana yazdırılır
                int backendValuea = questions[countQuestion][0];
                String stringValue = String.valueOf(backendValuea);
                a.setText(stringValue);
               
                 int backendValue2 = questions[countQuestion][1];
                System.out.println(backendValue2);
                String stringValue2 = String.valueOf(backendValue2);

                b.setText(stringValue2);
                System.out.println("b" +stringValue2);
             if (countQuestion > 0) {
                    //kullanıcıdan verdiği cecvap alınır ve doğruluğu kontrol eder
                     String resultText = result.getText();
                    initAnswer = Integer.parseInt(resultText);
                    timer.setText(String.valueOf(k));
                    questions[countQuestion-1][3] = initAnswer; 
                    System.out.println(initAnswer); 
                    if(initAnswer == questions[countQuestion-1][0]*questions[countQuestion-1][1]){
                    initResult = "Doğru";
                    correctCount++;
                    }else{
                     initResult = "Yanlış";
                }   
                    
                    
            }               
         }else{
                    //kullanıcıdan cevap alınır ve kontrol edilir.
                    //bu blok ilk soru için yazıldı
                     String resultText = result.getText();
                    System.out.println("resultText: " + resultText); // Debug amaçlı
                    initAnswer = Integer.parseInt(resultText);
                    timer.setText(String.valueOf(k));
                    questions[countQuestion-1][3] = initAnswer; 
                    System.out.println(initAnswer); 
                    if(initAnswer == questions[countQuestion-1][0]*questions[countQuestion-1][1]){
                    initResult = "Doğru";
                    correctCount++;
                    }else{
                     initResult = "Yanlış";
                }   
         }
         
            

                
                if(countQuestion <= settingsArr.get(selected).getNumberOfQuestion() && countQuestion >0 ){
                        //rapora ekleme
                        
                //güncel sorunun ayrıntılı bilgileri gameDetails dosyasına yazdırılmak üzere rowData dizisine atılır
                Object[] rowData = {selected+1,initUserName,currentDate, questions[countQuestion-1][0] + "x" + questions[countQuestion-1][1],initAnswer, initResult,times[countQuestion]-times[countQuestion-1],gameIDGenerated};

                try (FileWriter writer = new FileWriter(gameDetails, true)) {
                    StringBuilder line = new StringBuilder();
                    for (Object value : rowData) {
                        if (value instanceof String) {
                            line.append("\"").append(value).append("\"");
                        } else {
                            line.append(value);
                        }
                        line.append(",");
                    }
                    line.deleteCharAt(line.length() - 1); // Son virgülü kaldır
                    writer.append(line.toString());
                    writer.append(System.lineSeparator()); // Yeni satır ekle
                    System.out.println("Veri CSV dosyasına yazıldı: " + gameDetails);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if(settingsArr.get(selected).getNumberOfQuestion()==countQuestion){
                        //oyun bittiğinde genel bilgiler fullGames dosyasına yazdırılır
                        //kullanıcıya skorlarını göstermek üzere başka ekrana geçilir
                        addToFinalReport();
                        setVisible(false);
                        endGame frame2 = new endGame(correctScore,speedScore,totalScore,initUserName,selected);
                        frame2.setVisible(true);
                }


                  }
                countQuestion++;
}     
public void generateQuestions() {
     //soruları ve cavaplarını iki boyutlu questions dizisinde oluşturur
  
        questions = new int[settingsArr.get(selected).getNumberOfQuestion()+1][4];
        int randomA, randomB;
 
        for (int i = 0; i < settingsArr.get(selected).getNumberOfQuestion()+1; i++) {
            randomA = rand.nextInt(settingsArr.get(selected).getaMultFinishPoint()-settingsArr.get(selected).getaMultStartPoint()+1) + settingsArr.get(selected).getaMultStartPoint();
            randomB = rand.nextInt(settingsArr.get(selected).getbMultFinishPoint()-settingsArr.get(selected).getbMultStartPoint()+1) + settingsArr.get(selected).getbMultStartPoint();
            questions[i][0] = randomA;
            questions[i][1] = randomB;
            questions[i][2] = randomA * randomB;
       
        }
    }
public void addToFinalReport(){
                        //oyun bittiğinde oyunun bilgilerini fullGames dosyasına aktarır
                        float timeConverted = (float) k;
                        float questionConverted = (float) settingsArr.get(selected).getNumberOfQuestion();
                        correctScore = (correctCount / questionConverted)*1000;
                        speedScore = (questionConverted/timeConverted)*1000;
                        //skorları hesapla
                         correctScore = (float) (Math.round(correctScore * 100.0) / 100.0);
                         speedScore = (float) (Math.round(speedScore * 100.0) / 100.0);
                        
                         totalScore = correctScore + speedScore; 
                         totalScore = (float) (Math.round(totalScore * 100.0) / 100.0);
                        Object[] fullGame = {selected+1,initUserName,currentDate,correctCount,correctScore,speedScore,totalScore,k,gameIDGenerated};
                         //dosyaya yazdır
                        try (FileWriter writer = new FileWriter(fullGames, true)) {
                            StringBuilder line = new StringBuilder();
                            for (Object value : fullGame) {
                                if (value instanceof String) {
                                    line.append("\"").append(value).append("\"");
                                } else {
                                    line.append(value);
                                }
                                line.append(",");
                            }
                            line.deleteCharAt(line.length() - 1); // Son virgülü kaldır
                            writer.append(line.toString());
                            writer.append(System.lineSeparator()); // Yeni satır ekle
                            System.out.println("Veri CSV dosyasına yazıldı: " + fullGames);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
}
public LocalDateTime startGame() {
        return LocalDateTime.now(); // Oyun başladığında başlangıç zamanını kaydet

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField a;
    private javax.swing.JTextField b;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField question;
    private javax.swing.JTextField result;
    private javax.swing.JLabel timer;
    // End of variables declaration//GEN-END:variables
}
